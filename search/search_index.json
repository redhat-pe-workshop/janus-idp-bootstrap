{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Janus IDP Demo","text":"<p>The Janus IDP Demo is built on the back of Janus IDP and Backstage, with the goal of helping application teams get started quicker.</p>"},{"location":"#why-should-i-use-janus-idp-demo","title":"Why Should I use Janus IDP Demo?","text":"<p>Janus IDP Demo combines all of the required technologies used for creating a \"golden path\" for application deployment. It allows teams to very quickly get up and running with all the necessary items required in DevSecOps, while creating a tight inner development loop.</p>"},{"location":"#janus-idp-demo-components","title":"Janus IDP Demo Components","text":""},{"location":"#development","title":"Development","text":""},{"location":"#janus-idp","title":"Janus IDP","text":"<p>The Janus IDP(i.e. Backstage) is the front end of our Janus IDP Demo. It gives insight into the components installed in our Clusters and how those components connect to one another.</p> <p>Janus IDP Demo also uses Janus plugins to allow for the rapid deployment of new components. With the click of a button application teams can create a new code base including repo, pipelines, security, Kubernetes objects and everything required for development and deployment into Openshift.</p>"},{"location":"#developer-workspaces","title":"Developer Workspaces","text":"<p>The Janus IDP Demo deployment includes integration with CodeReady Worksapace allowing development teams to have instant access to an IDE preloaded with their new code and ready for development.</p>"},{"location":"#deployment","title":"Deployment","text":""},{"location":"#openshift-pipelinestekton","title":"Openshift Pipelines(Tekton)","text":"<p>Janus IDP Demo deploys a pipeline using Openshift Pipelines(Tekton) that run test and security scans on the code, as well as packaging the application and building/deploying the container image into a specified registry.</p>"},{"location":"#security","title":"Security","text":""},{"location":"#red-hat-ssokeycloak","title":"Red Hat SSO(Keycloak)","text":"<p>Red Hat SSO(Keycloak) is an identity management platform that secures our services (such as backstage) using a range of Identity Providers</p> <p>Default Setup</p> <p>By default janus users GitHub as our Identity Provider</p>"},{"location":"architecture/","title":"Architecture","text":""},{"location":"demo/","title":"Janus IDP Demo","text":""},{"location":"demo/#instructions","title":"Instructions","text":"<p>Important</p> <p>While running the demo, ensure that access is granted to the GitHub Organization when prompted.</p> <p></p>"},{"location":"demo/#reference-video","title":"Reference Video","text":""},{"location":"help/","title":"Help","text":"<p>For assistance troubleshooting and questions concerning the Janus IDP Demo, the following are available:</p> <ul> <li>The Developer Hub (Janus / Backstage) space in Google Chat</li> <li>The forum-backstage channel in the Internal Red Hat Slack</li> </ul>"},{"location":"install/","title":"Getting Started","text":"<p>Note</p> <p>This demo was developed with the Janus IDP Demo catalog item on the Red Hat Demo Platform as the intended target for deployment.  Though not supported, the full setup and demo should work on any OpenShift 4.12+ cluster.</p>"},{"location":"install/#instructional-video","title":"Instructional Video","text":""},{"location":"install/#prerequisites","title":"Prerequisites","text":"<ul> <li>oc (4.11+)</li> <li>ansible/ansible-galaxy</li> <li>helm<ul> <li>Please use the version included with your Openshift Deployment</li> </ul> </li> <li>pip3</li> </ul>"},{"location":"install/#install-packages","title":"Install Packages","text":"<ol> <li> <p>The Ansible <code>kubernetes.core</code> and <code>community.hashi_vault</code> collections need to be installed before using this playbook.</p> <pre><code>ansible-galaxy collection install kubernetes.core community.hashi_vault\n</code></pre> </li> <li> <p>The <code>kubernetes</code>, <code>openshift</code>, <code>hvac</code>, and <code>PyYAML</code> python packages need to be installed before using this playbook.</p> <pre><code>pip3 install --user kubernetes openshift hvac PyYAML\n</code></pre> </li> <li> <p>The <code>helm diff</code> plugin should to be installed before using this playbook.</p> <pre><code>helm plugin install https://github.com/databus23/helm-diff\n</code></pre> </li> </ol>"},{"location":"install/#configuration","title":"Configuration","text":"<p>Log in to your OpenShift cluster via the <code>oc</code> client.  Set the <code>OPENSHIFT_CLUSTER_INFO</code> variable for use later.</p> <pre><code>export OPENSHIFT_CLUSTER_INFO=$(oc cluster-info | head -n 1 | sed 's/^.*https...api//' | sed 's/.6443.*$//' )\n</code></pre> <p>Using Linux?</p> <p>If you are using a <code>Linux</code> environment, set the alias for the following commands to work:</p> <pre><code>alias open=\"xdg-open\"\n</code></pre> <p>For the remaining environment variables, it may be preferable to make use of <code>./env.sh</code> file provided at the root of this project.  Fill in the listed env vars as you complete the setup configuration, then run <code>source ./env.sh</code>.</p>"},{"location":"install/#create-github-organization","title":"Create GitHub Organization","text":"<p>Create a new Github Organization. This organization will contain the code repositories for the <code>components</code> created by Backstage.</p> <p>The <code>GITHUB_ORGANIZATION</code> environment variable will be set to the name of the organization.</p> <p>Tip</p> <p>You may also use any organization you are a member of, as long as you have the ability to create new repositories within it.</p> <pre><code>export GITHUB_ORGANIZATION=\n</code></pre>"},{"location":"install/#set-up-github-application","title":"Set Up GitHub Application","text":"<ol> <li> <p>Create a new GitHub Application to use the <code>Git WebHooks</code> functionality in this demo.  The required field will be populated, and correct permissions set.</p> <pre><code>open \"https://github.com/organizations/$GITHUB_ORGANIZATION/settings/apps/new?name=$GITHUB_ORGANIZATION-webhook&amp;url=https://janus-idp.io/blog&amp;webhook_active=false&amp;public=false&amp;administration=write&amp;checks=write&amp;actions=write&amp;contents=write&amp;statuses=write&amp;vulnerability_alerts=write&amp;dependabot_secrets=write&amp;deployments=write&amp;discussions=write&amp;environments=write&amp;issues=write&amp;packages=write&amp;pages=write&amp;pull_requests=write&amp;repository_hooks=write&amp;repository_projects=write&amp;secret_scanning_alerts=write&amp;secrets=write&amp;security_events=write&amp;workflows=write&amp;webhooks=write\"\n</code></pre> </li> <li> <p>Set the <code>GITHUB_APP_ID</code> and <code>GITHUB_APP_CLIENT_ID</code> environment variables to the App ID  and App Client ID, respectively. Generate a new client secret and set the <code>GITHUB_APP_CLIENT_SECRET</code> environment variable.  Then, generate a <code>Private Key</code> for this app and download the private key file.  Set the <code>GITHUB_KEY_FILE</code> environment variable to the downloaded file, using either the absolute path or the path relative to the <code>ansible/cluster-setup</code> directory.     <pre><code>export GITHUB_APP_ID=\n</code></pre> <pre><code>export GITHUB_APP_CLIENT_ID=\n</code></pre> <pre><code>export GITHUB_APP_CLIENT_SECRET=\n</code></pre> <pre><code>export GITHUB_KEY_FILE=\n</code></pre></p> <p></p> </li> <li> <p>Go to the <code>Install App</code> table on the left side of the page and install the GitHub App that you created for your organization.</p> <p></p> </li> </ol>"},{"location":"install/#create-github-oauth-applications","title":"Create Github OAuth Applications","text":"<p>Create an GitHub OAuth application in order to use GitHub as an Identity Provider for Backstage.</p> <pre><code>open \"https://github.com/settings/applications/new?oauth_application[name]=$GITHUB_ORGANIZATION-identity-provider&amp;oauth_application[url]=https://janus-demo.apps$OPENSHIFT_CLUSTER_INFO&amp;oauth_application[callback_url]=https://keycloak-backstage.apps$OPENSHIFT_CLUSTER_INFO/auth/realms/backstage/broker/github/endpoint\"\n</code></pre> <p>Set the <code>GITHUB_KEYCLOAK_CLIENT_ID</code> and <code>GITHUB_KEYCLOAK_CLIENT_SECRET</code> environment variables with the values from the OAuth application.</p> <pre><code>export GITHUB_KEYCLOAK_CLIENT_ID=\n</code></pre> <pre><code>export GITHUB_KEYCLOAK_CLIENT_SECRET=\n</code></pre> <p></p> <p>Create a second GitHub OAuth application to enable Dev Spaces to seamlessly push code changes to the repository for new components created in Backstage.  </p> <pre><code>open \"https://github.com/settings/applications/new?oauth_application[name]=$GITHUB_ORGANIZATION-dev-spaces&amp;oauth_application[url]=https://devspaces.apps$OPENSHIFT_CLUSTER_INFO&amp;oauth_application[callback_url]=https://devspaces.apps$OPENSHIFT_CLUSTER_INFO/api/oauth/callback\"\n</code></pre> <p>Set the <code>GITHUB_DEV_SPACES_CLIENT_ID</code> and <code>GITHUB_DEV_SPACES_CLIENT_SECRET</code> environment variables with the values from the OAuth application.</p> <pre><code>export GITHUB_DEV_SPACES_CLIENT_ID=\n</code></pre> <pre><code>export GITHUB_DEV_SPACES_CLIENT_SECRET=\n</code></pre> <p>Create a third GitHub OAuth application to enable the numerous Backstage plugins utilizing GitHub to authenticate and access the relevant data.</p> <pre><code>open \"https://github.com/settings/applications/new?oauth_application[name]=$GITHUB_ORGANIZATION-backstage&amp;oauth_application[url]=https://janus-demo.apps$OPENSHIFT_CLUSTER_INFO&amp;oauth_application[callback_url]=https://janus-demo.apps$OPENSHIFT_CLUSTER_INFO/api/auth/github/handler/frame\"\n</code></pre> <p>Set the <code>GITHUB_BACKSTAGE_CLIENT_ID</code> and <code>GITHUB_BACKSTAGE_CLIENT_SECRET</code> environment variables with the values from the OAuth application.</p> <pre><code>export GITHUB_BACKSTAGE_CLIENT_ID=\n</code></pre> <pre><code>export GITHUB_BACKSTAGE_CLIENT_SECRET=\n</code></pre>"},{"location":"install/#optional-create-quay-repository","title":"Optional: Create Quay Repository","text":"<p>Providing a Quay repository will allow the user to demonstrate pushing to an external image registry, as well as the functionality of the Quay plugin in Backstage.</p> <p>Create an organization in Quay, if one is not already available to use.</p> <pre><code>open \"https://quay.io/organizations/new/?namespace=$GITHUB_ORGANIZATION\"\n</code></pre> <p>Create a repository for each application to be instantiated through Backstage, ensuring that it is in the specified organization, and that the visibility is set to public.</p> <pre><code>open \"https://quay.io/new/?name=YOUR_APP_NAME\"\n</code></pre> <p></p> <p>Under <code>Repository Settings -&gt; User and Robot Permissions</code>, create a new robot account with write permission to the repository.</p> <p></p> <p>Set the <code>JANUS_QUAY_USER</code> and <code>JANUS_QUAY_TOKEN</code> environment variables to the username and token of the robot account.</p> <pre><code>export JANUS_QUAY_USER=\n</code></pre> <pre><code>export JANUS_QUAY_TOKEN=\n</code></pre>"},{"location":"install/#install","title":"Install","text":"<p>Clone the <code>demo-setup</code> repo and run the next commands from inside of the <code>ansible/cluster-setup</code> directory</p> <pre><code>git clone https://github.com/janus-idp/demo-setup.git\ncd demo-setup/ansible/cluster-setup\n</code></pre>"},{"location":"install/#run-the-software-templates-setup-playbook","title":"Run the Software Templates Setup Playbook","text":"<p>Fork the Software Templates repository to your organization. Ensure that the name of the forked repo remains as <code>software-templates</code></p> <p>Execute the following command to complete setup of the fork. This playbook will customize your fork of the Software Templates repo with relevant information pertaining to your cluster, and mimic the structure of a custom template being used in an enterprise IT environment.</p> <pre><code>ansible-playbook ./template.yaml\n</code></pre>"},{"location":"install/#run-the-cluster-setup-playbook","title":"Run the Cluster Setup Playbook","text":"<p>The Inventory values in <code>inventory/group_vars/all.yml</code> can be changed, but it is not required</p> <p>Run Command:</p> <pre><code>ansible-playbook site.yaml -i inventory\n</code></pre> <p>Note</p> <p>The deployment of most infrastructure is delegated to ArgoCD.  Once the playbook successfully runs, it may take several minutes until the demo is fully operational. The deployment can be monitored in the ArgoCD console.</p> <p>The cluster is now set up to run the Janus IDP Demo. Please refer to the Architecture and Demo sections for further guidance. </p> <p>To create a local copy of the requisite environment variables for future use, run the following command:</p> <pre><code>echo \"export GITHUB_ORGANIZATION=$GITHUB_ORGANIZATION\n\nexport GITHUB_APP_ID=$GITHUB_APP_ID\nexport GITHUB_APP_CLIENT_ID=$GITHUB_APP_CLIENT_ID\nexport GITHUB_APP_CLIENT_SECRET=$GITHUB_APP_CLIENT_SECRET\nexport GITHUB_KEY_FILE=$GITHUB_KEY_FILE\n\nexport GITHUB_KEYCLOAK_CLIENT_ID=$GITHUB_KEYCLOAK_CLIENT_ID\nexport GITHUB_KEYCLOAK_CLIENT_SECRET=$GITHUB_KEYCLOAK_CLIENT_SECRET\n\nexport GITHUB_DEV_SPACES_CLIENT_ID=$GITHUB_DEV_SPACES_CLIENT_ID\nexport GITHUB_DEV_SPACES_CLIENT_SECRET=$GITHUB_DEV_SPACES_CLIENT_SECRET\n\nexport GITHUB_BACKSTAGE_CLIENT_ID=$GITHUB_BACKSTAGE_CLIENT_ID\nexport GITHUB_BACKSTAGE_CLIENT_SECRET=$GITHUB_BACKSTAGE_CLIENT_SECRET\" &gt; env.sh\n</code></pre>"},{"location":"install/#troubleshooting","title":"Troubleshooting","text":"Stuck on <code>FAILED - RETRYING: [localhost]: Wait for Keycloak to be Ready (xxx retries left)</code> for over 2 minutes <p>Bounce the pod deployed by the <code>keycloak</code> StatefulSet in the <code>backstage</code> namespace.  The playbook will pick up again once the new pod is up.</p> Failed on <code>Run RHSSO Backstage Helm Chart</code> during initial run <code>no matches for kind \\\"Keycloak\\\" in version...</code> <p>The RHSSO operator may not have completed installation, try rerunning the Ansible Playbook.</p> Log in to Argo Cluster <p>To access the console, the password for the <code>admin</code> user can be found in the <code>argocd-cluster</code> secret.</p> Failed on <code>Fetching Default Service Account Token</code> with <code>unknown command \\\"token default\\\"</code> <p>Ensure your <code>oc</code> client is 4.11 or above <pre><code>oc version --client\n</code></pre> The latest <code>oc</code> client can be downloaded here: <pre><code>open \"https://console-openshift-console.apps$OPENSHIFT_CLUSTER_INFO/command-line-tools\"\n</code></pre></p>"},{"location":"install/#setup-for-previously-run-demo","title":"Setup for Previously Run Demo","text":"<p>If you previously run a demo and want to use the same GitHub Organization and repostiories you can.  Janus will discover previous repositories and automatically add them to the catalog.  In order to create the Argo CD resources, OpenShift namespaces and Tekton pipelines, follow the steps below:</p>"},{"location":"install/#set-your-environment-variables","title":"Set your Environment Variables","text":"<p>Make sure properly set all your environment variables as described in the Configuration section above.  This includes the setting of the <code>OPENSHIFT_CLUSTER_INFO</code></p>"},{"location":"install/#update-github-oauth-apps","title":"Update GitHub OAuth Apps","text":"<p>Update all OAuth apps created in the Configuration section above with the new cluster URL.</p> <p></p>"},{"location":"install/#update-software-templates","title":"Update Software Templates","text":"<p>Make sure your <code>$GITHUB_ORGANIZATION/software-templates</code> repository is up-to-date to ensure you get the latest features in the templates.  To do this, either hit the \"Sync fork\" button, delete and re-clone the repo as described in the first step here or run the following commands:</p> <pre><code>git fetch upstream\n\ngit checkout main\n\ngit merge upstream/main\n</code></pre>"},{"location":"install/#run-ansible-playbooks","title":"Run Ansible Playbooks","text":"<p>Run both playbooks as described in the <code>Run the Software Templates Setup Playbook</code> and <code>Run the Cluster Setup Playbook</code> sections above</p>"},{"location":"install/#clone-the-xxx-gitops-repos","title":"Clone the XXX-gitops repo(s)","text":"<ol> <li>Clone your <code>-gitops</code> repo.</li> <li>Update the <code>helm/build/values.yaml</code> by changing the <code>app.cluster</code> value to match your new cluster URL and commit the change</li> <li>Create the Argo CD resources by running the following command from the root of the <code>-gitops</code> repo <pre><code>oc apply -f ./argocd\n</code></pre> Repeat the above steps for as many <code>-gitops</code> repos you have in your Organization</li> </ol>"},{"location":"install/#update-webhooks","title":"Update Webhooks","text":"<p>Update the Webhooks for all of the source repos in your GitHub Organization</p> <p>Click on the Settings tab for your source repo and then click <code>Webhooks</code> on the left hand side</p> <p></p> <p>Click the <code>Edit</code> button next to the webhook</p> <p></p> <p>Update the <code>Payload URL</code> with your new cluster URL and click the <code>Update webhook</code> button at the bottom of the page </p> <p>Repeat for as many source repos as you wish.</p>"}]}